# editor
export EDITOR="nvim"
export VISUAL="nvim"

# set path
export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
export MANPATH="/usr/local/opt/coreutils/libexec/gnuman:$MANPATH"

# personal PS1 prompt
PS1="\n\[\e[1;35m\]\u\[\e[0;33m\] at \[\e[1;36m\]\h\[\e[0;33m\]:\[\e[0;33m\]\w\[\e[0;37m\]\n \[\e[0;33m\]$ \[\e[0;00m\]"

# alias vim
if [[ -a $(command -v nvim) ]]
    then
    alias vim="nvim"
fi

# ll
alias ll="ls -AlFGgh --color='always'"

# sets dot aliases
alias ..="cv .."
alias ...="cv ../.."
alias ....="cv ../../.."
alias .....="cv ../../../.."
alias ......="cv ../../../../.."
alias .......="cv ../../../../../.."

# aerl-services
alias aerl-services="aer-services -s aerl"

# cleans then runs
alias rcr="run clean && run"

# md-to-html
function md2html () {
    pandoc -o "$(echo "$1" | sed s/md/html/g)" "$1"
}

# makes 'cs' cd and ll
function cs () {
    cd "$1" && ll
    }

# new cv
function cv () {
    if [[ -a "$1" ]]
    then
        if [[ -d "$1" ]]
        then
            cd "$1" &&
            ll
        elif [[ -f "$1" ]]
        then
            cd $(dirname "$1") &&
            nvim $(basename "$1")
        else
            echo "neither a directory nor a file"
        fi
    else
        if [[ $PWD == */$(dirname "$1") ]]
        then
            nvim $(basename "$1")

        else
            if [[ "$1" == */ ]]
            then
                mkdir -p "$1" &&
                cd "$1"
            else
                mkdir -p $(dirname "$1") &&
                cd $(dirname "$1") &&
                nvim $(basename "$1")
            fi
        fi
    fi
}

# makes gs git status
alias gs="git status"

# makes gc
alias gc="git commit -m"

# makes gA add
alias gA="git add -A && git status"

# pull pulls
function pull () {
    if [[ -d $(python3 $HOME/bin/toproj.py $(pwd))/.snap ]]
    then
        git pull
    else
        git pull && snap pull
    fi
}

# makes makehash make assign-hashids dir
function makehash {
    task assign-hashids
    cd src
    setup_dir="$(dirname "$(find "$(git rev-parse --show-toplevel)" \
        -name setup.py | grep share)")"
    setup_dir=$(realpath --relative-to=. "$setup_dir")
    ln -s "$setup_dir/assign-hashids.py" .
    cd ..
    vim Makefile
}

# inits tasks TODO: should take -nhf for note, hand, frozen
function task () {
    mkdir "$1" && cd "$1"
    mkdir src input output
    cd src
    setup_dir="$(dirname "$(find "$(git rev-parse --show-toplevel)" \
        -name setup.py | grep share)")"
    setup_dir=$(realpath --relative-to=. "$setup_dir")
    ln -s "$setup_dir/setup.py" .

    # symlink inputs--currently from a menu
    cd ../input/
    touch "../../QUIT"
    PS3="Which task's outputs are this task's inputs? "
    select prev_task in ../../*;
    do
        case $prev_task in
        "../../QUIT")
            echo "Fine, pick your own inputs"
            break
            ;;
        *)
            ln -s $prev_task/output/* .
            break
            ;;
        esac
    done
    rm "../../QUIT"
    rm -- *.log *.yaml ||:
    cd ..
    tree -C
}

alias featherhead="featherhead.py"

function zhead () {
    zcat $1 | head
}

# done.

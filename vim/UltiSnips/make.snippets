# globals {{{
global !p
def get_script():
	import operator
	src_files = ['src/' + file for file in os.listdir('src/')]
	nm_time = dict()
	for src_file in src_files:
		try:
			file_str = open(src_file, 'r').read()
			if '#!' in file_str:
				fstat = os.stat(src_file)
				ftime = fstat.st_mtime
				nm_time[src_file] = ftime
		except:
			pass
	script = max(nm_time.items(), key=operator.itemgetter(1))[0]
	return script.replace('src/', '')

inputs = os.listdir('input/')
endglobal
# }}}
snippet gs_test
`!p snip.rv = get_script()`
endsnippet

# m1 {{{
snippet m1
# Authors:     $1
# Maintainers: $1
# License: 	   `! date +'%Y'`, HRDAG, GPL v2 or later
# ============================================
# `! projpath.py $PWD``!p snip.rv = fn`

.PHONY: all clean

all: output/${3:`!p snip.rv = inputs[0]`}

clean:
	-rm output/*

output/$3: \
		src/${2:`!p snip.rv = get_script()`} \
		input/`!p snip.rv = inputs[0]`
	python3 \$< --inputfile=input/`!p snip.rv = inputs[0]`

# done.
endsnippet
# }}}

# m2 {{{
snippet m2
# Authors:     $1
# Maintainers: $1
# License: 	   `! date +'%Y'`, HRDAG, GPL v2 or later
# ============================================
# `! projpath.py $PWD``!p snip.rv = fn`

.PHONY: all clean

all: output/${3:`!p snip.rv = inputs[0]`} \
		output/${4:`!p snip.rv = inputs[1]`}

clean:
	-rm output/*

output/$3: \
		src/${2:`!p snip.rv = get_script()`} \
		input/`!p snip.rv = t[3].replace('output/', 'input/')`
	python3 \$< --inputfile=input/`!p snip.rv = t[3].replace('output/', 'input/')`

output/$4: \
		src/$2 \
		input/`!p snip.rv = t[4].replace('output/', 'input/')`
	python3 \$< --inputfile=input/`!p snip.rv = t[4].replace('output/', 'input/')`


# done.
endsnippet
# }}}

# m3 {{{
snippet m3
# Authors:     $1
# Maintainers: $1
# License: 	   `! date +'%Y'`, HRDAG, GPL v2 or later
# ============================================
# `! projpath.py $PWD``!p snip.rv = fn`

.PHONY: all clean

all: output/${3:`!p snip.rv = inputs[0]`} \
		output/${4:`!p snip.rv = inputs[1]`}
		output/${5:`!p snip.rv = inputs[2]`}

clean:
	-rm output/*

$3: \
		src/${2:`!p snip.rv = get_script()`} \
		`!p snip.rv = inputs[0]`
	python3 \$< --inputfile=`!p snip.rv = inputs[0]`

$4: \
		$2 \
		`!p snip.rv = inputs[1]`
	python3 \$< --inputfile=`!p snip.rv = inputs[1]`

$5: \
		$2 \
		`!p snip.rv = inputs[2]`
	python3 \$< --inputfile=`!p snip.rv = inputs[2]`

# done.
endsnippet
# }}}

# pass1 {{{
snippet pass1
# Authors:     $1
# Maintainers: $1
# License: 	   `! date +'%Y'`, HRDAG, GPL v2 or later
# ============================================
# `! projpath.py $PWD``!p snip.rv = fn`

.PHONY: all clean

all: output/${3:`!p snip.rv = inputs[0]`}

clean:
	-rm output/*

output/$3: \
		input/`!p snip.rv = inputs[0]`
	ln -sf ../\$< \$@

# done.
endsnippet
# }}}

# pass2 {{{
snippet pass2
# Authors:     $1
# Maintainers: $1
# License: 	   `! date +'%Y'`, HRDAG, GPL v2 or later
# ============================================
# `! projpath.py $PWD``!p snip.rv = fn`

.PHONY: all clean

all: output/${3:`!p snip.rv = inputs[0]`} \
		output/${4:`!p snip.rv = inputs[1]`}

clean:
	-rm output/*

output/$3: \
		input/`!p snip.rv = inputs[0]`
	ln -sf ../\$< \$@

output/$4: \
		input/`!p snip.rv = inputs[1]`
	ln -sf ../\$< \$@

# done.
endsnippet
# }}}

# vim: foldmethod=marker
# done.

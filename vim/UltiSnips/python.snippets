# parserhead {{{
snippet parserhead
#!/bin/env python3
# -*- coding: utf-8 -*-
#
# Authors:     $1
# Maintainers: $1
# License:     20`! date +"%y"`, HRDAG, GPL v2 or later
# ===========================================
# `! projpath.py $PWD``!p snip.rv = fn`

import __main__ as main
import logging
import argparse
import pandas as pd
import setup
`!p
try:
	if '.yaml ' in ' '.join(os.listdir('../hand/')) or ' '.join(os.listdir('../hand/')).endswith('.yaml'):
		snip.rv = 'import yaml\n'
	else:
		snip.rv = '\n'
except FileNotFoundError:
	pass`

def get_setup():
	scriptpath = main.__file__
	parser = argparse.ArgumentParser()
	parser.add_argument('--inputfile', required=True)
	cmdline = parser.parse_args()
	outputfile = cmdline.inputfile.replace('input/', 'output/')
	args = {
		'fin': cmdline.inputfile,
		'fout': outputfile,`!p
try:
	dir_l = os.listdir('../hand')
except FileNotFoundError:
	dir_l = []
snip.rv = ''
for f in dir_l:
	file_base = os.path.splitext(f)[0]
	snip.rv += "\n        '{}': 'hand/{}'".format(file_base, f)`
	}
	return setup.do_setup(scriptpath, args)


if __name__ == '__main__':

	constants, logger = get_setup()
	logger.setLevel(logging.INFO)		# adjust as preferred
	logger.debug(constants)

	${2:`!p snip.rv = os.getcwd().split('/')[-3].lower()`} = pd.read_csv(constants.fin, sep='|')
	logger.info(f'{len($2)} recs read from {constants.fin}')`!p snip.rv = ''
try:
	for f in os.listdir('../hand/'):
		if f.endswith('.yaml'):
			name = os.path.splitext(f)[0]
			snip.rv += '\n    ' + name + ' = yaml.load(open(constants.'
			snip.rv += name + "))[\'" + name + "\']"
except FileNotFoundError:
	pass`

	$2.to_csv(constants.fout, **constants.csv_opts)
	logger.info(f'{len($2)} recs written to {constants.fout}')

# done.
endsnippet
# }}}

# head {{{
snippet head
#!/bin/env python3
# -*- coding: utf-8 -*-
#
# Authors:     $1
# Maintainers: $1
# License:     20`! date +"%y"`, HRDAG, GPL v2 or later
# ===========================================
# `! projpath.py $PWD``!p snip.rv = fn`
endsnippet
# }}}

# yamlload {{{
snippet yamlload
$1 = yaml.load(open(constants.$2))[$3]
endsnippet
# }}}

# schoolhead {{{
snippet schoolhead
#!/bin/env python3
# -*- coding: utf-8 -*-
#
# File: `!p snip.rv = fn`
# Written by: Gus Brocchini
# Date: `! date +"%d %b %Y"`
# $1

from graphics import GraphWin, Point, $2


def main():
	window = GraphWin($3)
	$0

	pt = window.getMouse()`!p try:
	with open('specs/' + fn.replace('.py', ''), 'r') as f:
		event_loop_lines = f.readlines()
	snip.rv = '\n' + ''.join(["    # " + line for line in event_loop_lines])
except FileNotFoundError:
	pass`
	window.close()


main()

# done.
endsnippet
# }}}

# schoolclass {{{
snippet schoolclass
#!/bin/env python3
# -*- coding: utf-8 -*-
#
# File: `!p snip.rv = fn`
# Written by: Gus Brocchini
# Date: `! date +"%d %b %Y"`
# $1

class $2:
	def __init__($3):
		$0

# done.
endsnippet
# }}}

# vim: foldmethod=marker
